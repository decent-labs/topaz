version: "3"

services:
  # Core Services

  ## the api service allows http access to topaz
  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    depends_on:
      - store
    ports:
      - "${API_PORT}:8080"
    environment:
      PQ_HOST:       "${PQ_HOST}"
      PQ_NAME:       "${PQ_NAME}"
      PQ_PORT:       "${PQ_PORT}"
      PQ_USER:       "${PQ_USER}"
      STARTUP_SLEEP: "${STARTUP_SLEEP}"
      STORE_HOST:    "${STORE_HOST}"
      STORE_PORT:    "${STORE_PORT}"

  ## the dispatch service triggers flush workers
  dispatch:
    build:
      context: .
      dockerfile: ./dispatch/Dockerfile
    depends_on:
      - flush
      - postgres
    environment:
      DISPATCH_RATE: "${DISPATCH_RATE}"
      FLUSH_HOST:    "${FLUSH_HOST}"
      FLUSH_PORT:    "${FLUSH_PORT}"
      PQ_HOST:       "${PQ_HOST}"
      PQ_NAME:       "${PQ_NAME}"
      PQ_PORT:       "${PQ_PORT}"
      PQ_USER:       "${PQ_USER}"
      STARTUP_SLEEP: "${STARTUP_SLEEP}"

  ## the ethereum service communicates between topaz and ethereum
  ethereum:
    build: ./ethereum
    ports:
      - "${ETHEREUM_PORT}:8080"
    environment:
      GETH_HOST:        "${GETH_HOST}"
      GETH_PRIVATE_KEY: "${GETH_PRIVATE_KEY}"
      STARTUP_SLEEP:    "${STARTUP_SLEEP}"

  ## the flush service flushes all pending objects for a user into IPFS
  flush:
    build:
      context: .
      dockerfile: ./flush/Dockerfile
    depends_on:
      - ethereum
      - ipfs
      - postgres
    environment:
      ETHEREUM_ADDRESS: "${ETHEREUM_ADDRESS}"
      ETHEREUM_HOST:    "${ETHEREUM_HOST}"
      ETHEREUM_PORT:    "${ETHEREUM_PORT}"
      IPFS_HOST:        "${IPFS_HOST}"
      IPFS_PORT:        "${IPFS_PORT}"
      PQ_HOST:          "${PQ_HOST}"
      PQ_NAME:          "${PQ_NAME}"
      PQ_PORT:          "${PQ_PORT}"
      PQ_USER:          "${PQ_USER}"
      STARTUP_SLEEP:    "${STARTUP_SLEEP}"

  ## the migrate service manages database migrations
  migrate:
    build: ./migrate
    environment:
      PQ_HOST: "${PQ_HOST}"
      PQ_NAME: "${PQ_NAME}"
      PQ_PORT: "${PQ_PORT}"
      PQ_USER: "${PQ_USER}"

  ## the store service manages the uploading of data to topaz
  store:
    build:
      context: .
      dockerfile: ./store/Dockerfile
    depends_on:
      - ipfs
      - postgres
    environment:
      IPFS_HOST:     "${IPFS_HOST}"
      IPFS_PORT:     "${IPFS_PORT}"
      PQ_HOST:       "${PQ_HOST}"
      PQ_NAME:       "${PQ_NAME}"
      PQ_PORT:       "${PQ_PORT}"
      PQ_USER:       "${PQ_USER}"
      STARTUP_SLEEP: "${STARTUP_SLEEP}"
      TOPAZ_USER:    "1"

  # Supporting Services

  ## the ipfs service provides dedication access to ipfs
  ipfs:
    image: ipfs/go-ipfs:v0.4.17
    ports:
      - "${IPFS_PORT}:5001"
      - "4001:4001"
    volumes:
      - "./ipfs/data:/data/ipfs"
      - "./ipfs/staging:/export"

  ## the postgres service contains the topaz database
  postgres:
    build: ./postgres
    depends_on:
      - migrate
    ports:
      - "${PQ_PORT}:5432"
